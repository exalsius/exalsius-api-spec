get:
  operationId: listClusters
  tags: [clusters]
  summary: List all clusters
  description: |
    **List all clusters**

    Retrieve all clusters, with optional filters:
    - `status`: pending,running, deleting, deleted, failed

    **Examples**

    Here's an example of how to filter by status:
      ```
      /clusters?cluster_status=running
      ```

  parameters: 
    - name: cluster_status
      in: query
      description: |
        Only return clusters of this status.
        Possible values:
        - `pending` - clusters that are pending (not yet deployed)
        - `deploying` - clusters that are being deployed
        - `ready` - clusters that are ready
        - `failed` - clusters that failed
      required: false
      schema:
        type: string
        enum: [PENDING, DEPLOYING, READY, FAILED]
        x-enum-varnames: [PENDING, DEPLOYING, READY, FAILED]
        description: >
          The status of the cluster.
          - `PENDING`: Cluster is pending (not yet deployed)
          - `DEPLOYING`: Cluster is being deployed
          - `READY`: Cluster is ready
          - `FAILED`: Cluster is failed

  responses:
    '200':
      $ref: '../../components/responses/clusters-list-response.yaml'
    '404':
      $ref: '../../components/responses/error-response.yaml'
      useExample: cluster-not-found
    '500':
      $ref: '../../components/responses/error-response.yaml'
      useExample: server-error
  x-codeSamples:
    - lang: curl
      label: cURL
      source: |
        curl -X GET "https://api.exalsius.ai/clusters"
    - lang: python
      label: Python
      source: |
        import requests
        response = requests.get("https://api.exalsius.ai/clusters")
        print(response.json())

post:
  operationId: createCluster
  tags: [clusters]
  summary: Create a cluster
  description: |
    **Create a cluster**

    Create a new cluster.

    **Parameters**

    - `name`: The name of the cluster
    - `k8s_version`: The Kubernetes version of the cluster
    - `to_be_deleted_at`: The date and time the cluster will be deleted (optional)
    - `control_plane_node_ids`: The IDs of the control plane nodes (optional)
    - `worker_node_ids`: The IDs of the worker nodes (optional)
    - `services`: The IDs of the services to deploy in the cluster (optional)

    If `to_be_deleted_at` is provided, the cluster will automatically be deleted at the specified date and time.
    If `control_plane_node_ids` or `worker_node_ids` are provided, the nodes will be added to the cluster.
    If `services` are provided, the services will be deployed in the cluster.

    **Behavior**

    Creating a new cluster will result in a new cluster resource being created. The cluster will be in 
    the `pending` state until the `POST /clusters/{cluster_id}/deploy` operation is called.

  requestBody: 
    required: true
    content: 
      application/json: 
        schema:
          $ref: '../../components/requests/cluster-create-request.yaml'
  responses:
    '201':
      $ref: '../../components/responses/cluster-create-response.yaml'
    '400':
      $ref: '../../components/responses/error-response.yaml'
      useExample: bad-request
    '409':
      $ref: '../../components/responses/error-response.yaml'
      useExample: cluster-already-exists
    '500':
      $ref: '../../components/responses/error-response.yaml'
      useExample: server-error
  
  x-codeSamples:
    - lang: curl
      label: cURL
      source: |
        curl -X POST "https://api.exalsius.ai/clusters" -H "Content-Type: application/json" -d '{"name": "my-cluster", "k8sVersion": "1.30"}'
    - lang: python
      label: Python
      source: |
        import requests
        response = requests.post("https://api.exalsius.ai/clusters", json={"name": "my-cluster", "k8sVersion": "1.30"})
        print(response.json())
