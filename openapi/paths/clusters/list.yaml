get:
  operationId: listClusters
  tags: [clusters]
  summary: List all clusters
  description: |
    **List all clusters**

    Retrieve all clusters, with optional filters:
    - `status`: pending,running, deleting, deleted, failed

    **Examples**

    Here's an example of how to filter by status:
      ```
      /clusters?status=running
      ```

  parameters: 
    - name: status
      in: query
      description: |
        Only return clusters of this status.
        Possible values:
        - `pending` - clusters that are pending
        - `running` - clusters that are running
        - `deleting` - clusters that are deleting
        - `deleted` - clusters that are deleted
        - `failed` - clusters that failed
      required: false
      schema:
        type: string
        x-extensible-enum:
          - value: PENDING
            description: clusters that are pending
          - value: RUNNING
            description: clusters that are running
          - value: DELETING
            description: clusters that are deleting
          - value: DELETED
            description: clusters that are deleted
          - value: FAILED
            description: clusters that failed

  responses:
    '200':
      description: List of clusters
      content:
        application/json:
          schema:
            $ref: '../../components/responses/clusters-list-response.yaml'
          examples:
            default:
              summary: A list of clusters
              value:
                clusters:
                  - id: 1
                    name: "my-cluster"
                    cluster_status: "RUNNING"
                    created_at: "2025-01-01T00:00:00Z"
                    updated_at: "2025-01-01T00:00:00Z"
                    to_be_deleted_at: "2025-02-01T00:00:00Z"
                    control_plane_node_ids:
                      - "123e4567-e89b-12d3-a456-426614174000"
                      - "123e4567-e89b-12d3-a456-426614174001"
                      - "123e4567-e89b-12d3-a456-426614174002"
                    worker_node_ids:
                      - "123e4567-e89b-12d3-a456-426614174003"
                      - "123e4567-e89b-12d3-a456-426614174004"
                      - "123e4567-e89b-12d3-a456-426614174005"
                    service_deployments:
                      - service_id: "ffd4c2f4-ec48-41f1-be56-52ba90f661b6"
                        service_name: "my-service"
                        values:
                          key: "value"
                    k8s_version: "1.30.0"
                    current_costs: 100.0
                    costs_per_hour: 1.0
                  - id: 2
                    name: "my-cluster-2"
                    cluster_status: "PENDING"
                    created_at: "2025-01-01T00:00:00Z"
                    updated_at: "2025-01-01T00:00:00Z"
                    to_be_deleted_at: "2025-02-01T00:00:00Z"
                    control_plane_node_ids:
                      - "123e4567-e89b-12d3-a456-426614174006"
                      - "123e4567-e89b-12d3-a456-426614174007"
                      - "123e4567-e89b-12d3-a456-426614174008"
                    worker_node_ids:
                      - "123e4567-e89b-12d3-a456-426614174009"
                      - "123e4567-e89b-12d3-a456-426614174010"
                      - "123e4567-e89b-12d3-a456-426614174011"
                    service_deployments:
                      - service_id: "ffd4c2f4-ec48-41f1-be56-52ba90f661b7"
                        service_name: "my-service-2"
                        values:
                          key: "value"
                    k8s_version: "1.30.0"
                    current_costs: 200.0
                    costs_per_hour: 2.0
                total: 2
            empty:
              summary: An empty list of clusters
              value:
                clusters: []
                total: 0
    '404':
      description: Cluster not found
      content:
        application/problem+json:
          schema:
            $ref: '../../components/schemas/error.yaml'
          example:
            type: "https://api.exalsius.ai/errors/not-found"
            title: "Not Found"
            status: 404
            detail: "The cluster with ID 123 was not found."
            instance: "/clusters/123"
    '500':
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '../../components/schemas/error.yaml'
          example:
            type: "https://api.exalsius.ai/errors/server-error"
            title: "Internal Server Error"
            status: 500 
            detail: "An internal server error occurred while processing the request."
            instance: "/clusters"
  x-codeSamples:
    - lang: curl
      label: cURL
      source: |
        curl -X GET "https://api.exalsius.ai/clusters"
    - lang: python
      label: Python
      source: |
        import requests
        response = requests.get("https://api.exalsius.ai/clusters")
        print(response.json())

post:
  operationId: createCluster
  tags: [clusters]
  summary: Create a cluster
  description: |
    **Create a cluster**

    Create a new cluster.

    **Parameters**

    - `name`: The name of the cluster
    - `k8s_version`: The Kubernetes version of the cluster
    - `to_be_deleted_at`: The date and time the cluster will be deleted (optional)
    - `control_plane_node_ids`: The IDs of the control plane nodes (optional)
    - `worker_node_ids`: The IDs of the worker nodes (optional)
    - `services`: The IDs of the services to deploy in the cluster (optional)

    If `to_be_deleted_at` is provided, the cluster will automatically be deleted at the specified date and time.
    If `control_plane_node_ids` or `worker_node_ids` are provided, the nodes will be added to the cluster.
    If `services` are provided, the services will be deployed in the cluster.

    **Behavior**

    Creating a new cluster will result in a new cluster resource being created. The cluster will be in 
    the `pending` state until the `POST /clusters/{cluster_id}/deploy` operation is called.

  requestBody: 
    required: true
    content: 
      application/json: 
        schema:
          $ref: '../../components/requests/cluster-create-request.yaml'
  responses:
    '201':
      description: Cluster created
      content:
        application/json:
          schema:
            $ref: '../../components/responses/cluster-create-response.yaml'
          examples:
            default:
              summary: Cluster created
              value:
                cluster_id: 1
    '400':
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '../../components/schemas/error.yaml'
          example:
            type: "https://api.exalsius.ai/errors/bad-request"
            title: "Bad Request"
            status: 400
            detail: "Bad request"
            instance: "/clusters"
    '500':
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '../../components/schemas/error.yaml'
          example:
            type: "https://api.exalsius.ai/errors/server-error"
            title: "Internal Server Error"
            status: 500
            detail: "An internal server error occurred while processing the request."
            instance: "/clusters"
  
  x-codeSamples:
    - lang: curl
      label: cURL
      source: |
        curl -X POST "https://api.exalsius.ai/clusters" -H "Content-Type: application/json" -d '{"name": "my-cluster", "k8sVersion": "1.30"}'
    - lang: python
      label: Python
      source: |
        import requests
        response = requests.post("https://api.exalsius.ai/clusters", json={"name": "my-cluster", "k8sVersion": "1.30"})
        print(response.json())
