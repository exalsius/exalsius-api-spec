get:
  operationId: listNodes
  tags: [nodes]
  summary: List all imported nodes in the node pool
  description: |
    **List nodes in the pool**

    Retrieve all imported nodes, with optional filters:
    - `node_type`: self-managed or cloud-imported
    - `provider`: AWS, Azure, etc.

    **Examples**

    Here's an example of how to filter by node type:
      ```
      /nodes?node_type=self-managed
      ```
      
      Here's an example of how to filter by provider:
      ```
      /nodes?provider=aws
      ```

  parameters:
    - name: node_type
      in: query
      description: |
        Only return nodes of this type.  
        Possible values:
        - `self-managed` - only self-managed (SSH) nodes  
        - `cloud` - only cloud-imported nodes
      required: false
      schema:
        type: string
        enum: [CLOUD, SELF_MANAGED]
        x-enum-varnames: [CLOUD, SELF_MANAGED]
        description: >
          The type of the node.
          - `CLOUD`: Cloud node
          - `SELF_MANAGED`: Self-managed node
    - name: provider
      in: query
      description: |
        Only return nodes of this provider.
        Example:
        - `aws` - only AWS node instances
      required: false
      schema:
        type: string

  responses:
    '200':
      $ref: '../../components/responses/nodes-list-response.yaml'
    '400':
      $ref: '../../components/responses/error-response.yaml'
      useExample: node-invalid-type
    '500':
      $ref: '../../components/responses/error-response.yaml'
      useExample: server-error
  x-codeSamples:
    - lang: curl
      label: cURL
      source: |
        curl -X GET "https://api.exalsius.ai/nodes?nodeType=cloud&provider=aws"
    - lang: python
      label: Python
      source: |
        import requests
        from typing import Optional

        def get_nodes(
            node_type: Optional[str] = None,
            provider: Optional[str] = None
        ) -> dict:
            """
            Fetch nodes with optional filtering parameters.

            Args:
                node_type: The type of nodes to return
                provider: The provider of the nodes to return
                
            Returns:
                dict: The JSON response containing the nodes
            """
            url = "https://api.exalsius.ai/nodes"
            params = {}
            if node_type:
                params['nodeType'] = node_type
            if provider:
                params['provider'] = provider
            response = requests.get(url, params=params)
            return response.json()
        
        nodes = get_nodes(nodeType="cloud", provider="aws")
        print(nodes)
        
