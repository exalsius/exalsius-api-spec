get:
  operationId: getOffers
  tags: [offers]
  summary: List and filter current GPU on-demand and spot market offers
  security:
    - OAuth2:
      # This operation is accessible by users (openid) and m2m applications with scope gpuradar
      - openid
      - gpuradar
  description: |
    **List GPU offers (on-demand & spot instances)**
    Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.

  parameters:
    - name: gpu_vendor
      in: query
      schema:
        type: string
        enum:
          - NVIDIA
          - AMD
          - INTEL
          - HUAWEI
          - UNKNOWN
      description: The vendor of the GPU
    - name: gpu_type
      in: query
      schema:
        type: string
      description: The type of the GPU
      required: false
    - name: cloud_provider
      in: query
      schema:
        type: string
        enum:
          - AWS
          - AZURE
          - GCP
          - OCI
          - LAMBDA
          - PAPERSPACE
          - VAST
          - FLUIDSTACK
          - CUDO
          - NEBIUS
          - HYPERBOLIC
          - SCP
          - DO
          - OVHCLOUD
          - SCALEWAY
          - PRIMEINTELLECT
          - IBM
          - UNKNOWN
      description: The cloud provider of the offer
      required: false
    - name: region
      in: query
      schema:
        type: string
      description: The region of the offer, e.g. us-east-1
      required: false
    - name: availability_zone
      in: query
      schema:
        type: string
      description: The availability zone of the offer
      required: false
    - name: location
      in: query
      schema:
        type: string
      description: The location of the offer
      required: false
    - name: cpu_vendor
      in: query
      schema:
        type: string
        enum: [INTEL, AMD, UNKNOWN]
      description: The vendor of the CPU
      required: false
    - name: cpu_arch
      in: query
      schema:
        type: string
        enum: [X86_64, AARCH64, ARM64, UNKNOWN]
      description: The architecture of the CPU
      required: false
    - name: pricing_unit
      in: query
      schema:
        type: string
        enum: [HOURLY, MONTHLY, YEARLY, UNKNOWN]
      description: The pricing unit
      required: false
    - name: price_type
      in: query
      schema:
        type: string
        enum: [ON_DEMAND, SPOT]
      description: The type of pricing model
      required: false

    - name: gpu_count_min
      in: query
      schema:
        type: integer
      description: Minimum number of GPUs
      required: false
    - name: gpu_count_max
      in: query
      schema:
        type: integer
      description: Maximum number of GPUs
      required: false
    - name: gpu_memory_min
      in: query
      schema:
        type: integer
      description: Minimum GPU memory of single GPU (MiB)
      required: false
    - name: gpu_memory_max
      in: query
      schema:
        type: integer
      description: Maximum GPU memory of single GPU (MiB)
      required: false
    - name: total_gpu_memory_min
      in: query
      schema:
        type: integer
      description: Minimum total GPU memory (MiB)
      required: false
    - name: total_gpu_memory_max
      in: query
      schema:
        type: integer
      description: Maximum total GPU memory (MiB)
      required: false
    - name: main_memory_min
      in: query
      schema:
        type: integer
      description: Minimum main memory (MiB)
      required: false
    - name: main_memory_max
      in: query
      schema:
        type: integer
      description: Maximum main memory (MiB)
      required: false
    - name: vcpus_min
      in: query
      schema:
        type: integer
      description: Minimum number of virtual CPUs
      required: false
    - name: vcpus_max
      in: query
      schema:
        type: integer
      description: Maximum number of virtual CPUs
      required: false
    - name: price_min
      in: query
      schema:
        type: number
        format: float
        x-python-type: Optional[Union[float, int]]
      description: Minimum price per hour
      required: false
    - name: price_max
      in: query
      schema:
        type: number
        format: float
        x-python-type: Optional[Union[float, int]]
      description: Maximum price per hour
      required: false

    - name: page_size
      in: query
      schema:
        type: integer
      description: The number of offers to return per page
      required: false
    - name: cursor
      in: query
      schema:
        type: string
      description: The cursor for pagination. Use the `next_cursor` from the previous response to get the next page.
      required: false

    - name: sort_by
      in: query
      schema:
        type: string
        enum:
          - price
          - gpu_count
          - gpu_memory_mib
          - total_gpu_memory_mib
          - main_memory_mib
          - num_vcpus
          - hourly_cost
      description: Field to sort by
      required: false
    - name: sort_order
      in: query
      schema:
        type: string
        enum: [asc, desc]
      description: Sort order
      required: false

    - name: non_gpu_instances
      in: query
      schema:
        type: boolean
        default: false
        x-python-type: Optional[bool]
      description: Whether to include non-GPU instances
      required: false
      
      
  responses:
    '200':
      $ref: '../components/responses/offers-list-response.yaml'
    '400':
      $ref: '../components/responses/error-response.yaml'
      useExample: bad-request
    '500':
      $ref: '../components/responses/error-response.yaml'
      useExample: server-error
  
  x-codeSamples:
    - lang: curl
      label: cURL
      source: |
        curl -X GET "https://api.exalsius.ai/offers?gpu_vendor=nvidia&provider=aws&region=us-east-1&gpu_count=1"
    - lang: python
      label: Python
      source: |
        import requests
        from typing import Optional

        def get_offers(
            gpu_vendor: Optional[str] = None,
            provider: Optional[str] = None,
            region: Optional[str] = None,
            gpu_count: Optional[int] = None,
            price: Optional[float] = None,
            limit: Optional[int] = None
        ) -> dict:
            """
            Fetch GPU offers with optional filtering parameters.
            
            Args:
                gpu_vendor: The vendor of the GPU (nvidia, amd, intel, huawei)
                provider: The cloud provider of the offer
                region: The region of the offer (e.g. us-east-1)
                gpu_count: The minimum number of GPUs in the offer
                price: The maximum price per hour for the offer
                limit: The maximum number of offers to return
                
            Returns:
                dict: The JSON response containing the offers
            """
            base_url = "https://api.exalsius.ai/offers"
            params = {}
            
            if gpu_vendor:
                params["gpuVendor"] = gpu_vendor
            if provider:
                params["provider"] = provider
            if region:
                params["region"] = region
            if gpu_count:
                params["gpuCount"] = gpu_count
            if price:
                params["price"] = price
            if limit:
                params["limit"] = limit
            
            response = requests.get(base_url, params=params)
            return response.json()

        # Example usage:
        offers = get_offers(
            gpu_vendor="nvidia",
            provider="aws",
            region="us-east-1",
            gpu_count=1
        )
        print(offers)

  x-llm:
    description: |
      When building a conversational agent, use this operation to fetch the
      live set of offers. You can ask users "How many deals do you want?" and
      then inject their answer into the `limit` parameter. 
      You can also ask users to filter by vendor, provider, region, gpuCount, and price.

    promptTemplate: |
      "Fetch me up to {limit} current offers from the catalogâ€”include title,
      pricing and expiration date in JSON."