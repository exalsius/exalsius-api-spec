# coding: utf-8

"""
exalsius API

The exalsius REST API provides programmatic access to the core functionality of the exalsius ecosystem It is consumed directly by the exls CLI tool and can also be integrated into custom applications or scripts. Key points: * **CLI & Programmatic Access**   All operations are available via the `exls` command-line application or through standard HTTP requests.  * **GPU Market Offers** Retrieve and compare GPU instance pricing across public cloud providers and hyperscalers to identify the most cost-effective options. * **Operator Integration**   Works in conjunction with the [exalsius-operator](https://github.com/exalsius/exalsius-operator) deployed in a management Kubernetes cluster, to manage infrastructure and node lifecycles.  * **Node Management**   Import self-managed (SSH) and cloud-provider instances into your node pool with dedicated endpoints.  * **Cluster Provisioning**   Create and manage Kubernetes clusters across supported cloud providers and self-managed (bare-metal) nodes.  * **Service Deployment**   Deploy additional services—such as the NVIDIA GPU Operator, KubeRay, Flyte, or Kubeflow—using the API’s service-deployment endpoints.

The version of the OpenAPI document: 1.0.0
Contact: support@exalsius.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from exalsius_api_client.api.clusters_api import ClustersApi


class TestClustersApi(unittest.TestCase):
    """ClustersApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ClustersApi()

    def tearDown(self) -> None:
        pass

    def test_add_cluster_services(self) -> None:
        """Test case for add_cluster_services

        Add service deployments to a cluster
        """
        pass

    def test_add_nodes(self) -> None:
        """Test case for add_nodes

        Add nodes to a cluster
        """
        pass

    def test_create_cluster(self) -> None:
        """Test case for create_cluster

        Create a cluster
        """
        pass

    def test_delete_cluster(self) -> None:
        """Test case for delete_cluster

        Delete (tear-down) a cluster
        """
        pass

    def test_delete_node_from_cluster(self) -> None:
        """Test case for delete_node_from_cluster

        Delete a node from a cluster
        """
        pass

    def test_deploy_cluster(self) -> None:
        """Test case for deploy_cluster

        Deploy a new cluster
        """
        pass

    def test_describe_cluster(self) -> None:
        """Test case for describe_cluster

        Get details of a single cluster
        """
        pass

    def test_get_cluster_kubeconfig(self) -> None:
        """Test case for get_cluster_kubeconfig

        Get the kubeconfig for a cluster
        """
        pass

    def test_get_cluster_services(self) -> None:
        """Test case for get_cluster_services

        Get services of a cluster
        """
        pass

    def test_get_nodes(self) -> None:
        """Test case for get_nodes

        Get nodes of a cluster
        """
        pass

    def test_list_clusters(self) -> None:
        """Test case for list_clusters

        List all clusters
        """
        pass


if __name__ == "__main__":
    unittest.main()
