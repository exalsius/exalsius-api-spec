# coding: utf-8

"""
exalsius API

The exalsius REST API provides programmatic access to the core functionality of the exalsius ecosystem It is consumed directly by the exls CLI tool and can also be integrated into custom applications or scripts. Key points: * **CLI & Programmatic Access**   All operations are available via the `exls` command-line application or through standard HTTP requests.  * **GPU Market Offers** Retrieve and compare GPU instance pricing across public cloud providers and hyperscalers to identify the most cost-effective options. * **Operator Integration**   Works in conjunction with the [exalsius-operator](https://github.com/exalsius/exalsius-operator) deployed in a management Kubernetes cluster, to manage infrastructure and node lifecycles.  * **Node Management**   Import self-managed (SSH) and cloud-provider instances into your node pool with dedicated endpoints.  * **Cluster Provisioning**   Create and manage Kubernetes clusters across supported cloud providers and self-managed (bare-metal) nodes.  * **Service Deployment**   Deploy additional services—such as the NVIDIA GPU Operator, KubeRay, Flyte, or Kubeflow—using the API’s service-deployment endpoints.

The version of the OpenAPI document: 1.22.0
Contact: support@exalsius.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from exalsius_api_client.models.base_node import BaseNode


class SelfManagedNode(BaseNode):
    """
    SelfManagedNode
    """  # noqa: E501

    node_type: Optional[StrictStr] = Field(
        default=None, description='The type of the node. Must be "SELF_MANAGED".'
    )
    endpoint: StrictStr = Field(
        description="The endpoint of the node (IP or hostname) and port"
    )
    username: StrictStr = Field(description="The username to connect to the node")
    ssh_key_id: StrictStr = Field(
        description="The ID of the private SSH key to connect to the node"
    )
    last_heartbeat_date: Optional[datetime] = Field(
        default=None, description="The last time a heartbeat was received from the node"
    )
    __properties: ClassVar[List[str]] = [
        "gpu_count",
        "gpu_vendor",
        "gpu_type",
        "gpu_memory",
        "cpu_cores",
        "memory_gb",
        "storage_gb",
        "id",
        "node_type",
        "namespace",
        "hostname",
        "description",
        "location",
        "import_time",
        "node_status",
        "endpoint",
        "username",
        "ssh_key_id",
        "last_heartbeat_date",
    ]

    @field_validator("node_type")
    def node_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["SELF_MANAGED"]):
            raise ValueError("must be one of enum values ('SELF_MANAGED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SelfManagedNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SelfManagedNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "gpu_count": obj.get("gpu_count"),
                "gpu_vendor": obj.get("gpu_vendor"),
                "gpu_type": obj.get("gpu_type"),
                "gpu_memory": obj.get("gpu_memory"),
                "cpu_cores": obj.get("cpu_cores"),
                "memory_gb": obj.get("memory_gb"),
                "storage_gb": obj.get("storage_gb"),
                "id": obj.get("id"),
                "node_type": obj.get("node_type"),
                "namespace": obj.get("namespace"),
                "hostname": obj.get("hostname"),
                "description": obj.get("description"),
                "location": obj.get("location"),
                "import_time": obj.get("import_time"),
                "node_status": obj.get("node_status"),
                "endpoint": obj.get("endpoint"),
                "username": obj.get("username"),
                "ssh_key_id": obj.get("ssh_key_id"),
                "last_heartbeat_date": obj.get("last_heartbeat_date"),
            }
        )
        return _obj
