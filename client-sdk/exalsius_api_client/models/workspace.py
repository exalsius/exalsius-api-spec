# coding: utf-8

"""
exalsius API

The exalsius REST API provides programmatic access to the core functionality of the exalsius ecosystem It is consumed directly by the exls CLI tool and can also be integrated into custom applications or scripts. Key points: * **CLI & Programmatic Access**   All operations are available via the `exls` command-line application or through standard HTTP requests.  * **GPU Market Offers** Retrieve and compare GPU instance pricing across public cloud providers and hyperscalers to identify the most cost-effective options. * **Operator Integration**   Works in conjunction with the [exalsius-operator](https://github.com/exalsius/exalsius-operator) deployed in a management Kubernetes cluster, to manage infrastructure and node lifecycles.  * **Node Management**   Import self-managed (SSH) and cloud-provider instances into your node pool with dedicated endpoints.  * **Cluster Provisioning**   Create and manage Kubernetes clusters across supported cloud providers and self-managed (bare-metal) nodes.  * **Service Deployment**   Deploy additional services—such as the NVIDIA GPU Operator, KubeRay, Flyte, or Kubeflow—using the API’s service-deployment endpoints.

The version of the OpenAPI document: 1.16.0
Contact: support@exalsius.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from exalsius_api_client.models.resource_pool import ResourcePool
from exalsius_api_client.models.workspace_access_information import \
    WorkspaceAccessInformation
from exalsius_api_client.models.workspace_template import WorkspaceTemplate


class Workspace(BaseModel):
    """
    Workspace
    """  # noqa: E501

    id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier for the workspace"
    )
    name: StrictStr = Field(description="The name of the workspace")
    cluster_id: StrictStr = Field(
        description="The unique identifier of the associated cluster"
    )
    workspace_status: Optional[StrictStr] = Field(
        default=None,
        description="The status of the workspace. - `PENDING`: Workspace is pending - `RUNNING`: Workspace is running - `STOPPED`: Workspace is stopped - `DELETED`: Workspace is deleted - `FAILED`: Workspace is failed ",
    )
    template: WorkspaceTemplate
    owner: Optional[StrictStr] = Field(
        default=None, description="The owner of the workspace"
    )
    description: Optional[StrictStr] = Field(
        default=None, description="The description of the workspace"
    )
    access_information: Optional[List[WorkspaceAccessInformation]] = Field(
        default=None, description="The access information for the workspace"
    )
    resources: ResourcePool = Field(
        description="The resources allocated to the workspace"
    )
    created_at: Optional[datetime] = Field(
        default=None, description="The date and time the workspace was created"
    )
    to_be_deleted_at: Optional[datetime] = Field(
        default=None, description="The date and time the workspace will be deleted"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "cluster_id",
        "workspace_status",
        "template",
        "owner",
        "description",
        "access_information",
        "resources",
        "created_at",
        "to_be_deleted_at",
    ]

    @field_validator("workspace_status")
    def workspace_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "RUNNING", "STOPPED", "DELETED", "FAILED"]):
            raise ValueError(
                "must be one of enum values ('PENDING', 'RUNNING', 'STOPPED', 'DELETED', 'FAILED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict["template"] = self.template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_information (list)
        _items = []
        if self.access_information:
            for _item_access_information in self.access_information:
                if _item_access_information:
                    _items.append(_item_access_information.to_dict())
            _dict["access_information"] = _items
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict["resources"] = self.resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "cluster_id": obj.get("cluster_id"),
                "workspace_status": obj.get("workspace_status"),
                "template": (
                    WorkspaceTemplate.from_dict(obj["template"])
                    if obj.get("template") is not None
                    else None
                ),
                "owner": obj.get("owner"),
                "description": obj.get("description"),
                "access_information": (
                    [
                        WorkspaceAccessInformation.from_dict(_item)
                        for _item in obj["access_information"]
                    ]
                    if obj.get("access_information") is not None
                    else None
                ),
                "resources": (
                    ResourcePool.from_dict(obj["resources"])
                    if obj.get("resources") is not None
                    else None
                ),
                "created_at": obj.get("created_at"),
                "to_be_deleted_at": obj.get("to_be_deleted_at"),
            }
        )
        return _obj
