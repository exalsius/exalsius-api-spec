# coding: utf-8

"""
exalsius API

The exalsius REST API provides programmatic access to the core functionality of the exalsius ecosystem It is consumed directly by the exls CLI tool and can also be integrated into custom applications or scripts. Key points: * **CLI & Programmatic Access**   All operations are available via the `exls` command-line application or through standard HTTP requests.  * **GPU Market Offers** Retrieve and compare GPU instance pricing across public cloud providers and hyperscalers to identify the most cost-effective options. * **Operator Integration**   Works in conjunction with the [exalsius-operator](https://github.com/exalsius/exalsius-operator) deployed in a management Kubernetes cluster, to manage infrastructure and node lifecycles.  * **Node Management**   Import self-managed (SSH) and cloud-provider instances into your node pool with dedicated endpoints.  * **Cluster Provisioning**   Create and manage Kubernetes clusters across supported cloud providers and self-managed (bare-metal) nodes.  * **Service Deployment**   Deploy additional services—such as the NVIDIA GPU Operator, KubeRay, Flyte, or Kubeflow—using the API’s service-deployment endpoints.

The version of the OpenAPI document: 1.21.1
Contact: support@exalsius.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class NodePatchRequest(BaseModel):
    """
    NodePatchRequest
    """  # noqa: E501

    gpu_count: Optional[StrictInt] = Field(
        default=None, description="The number of GPUs"
    )
    gpu_vendor: Optional[StrictStr] = Field(
        default=None, description="The vendor of the GPU"
    )
    gpu_type: Optional[StrictStr] = Field(
        default=None, description="The type of the GPU"
    )
    gpu_memory: Optional[StrictInt] = Field(
        default=None, description="The memory of the GPU in GB"
    )
    cpu_cores: Optional[StrictInt] = Field(
        default=None, description="The number of CPU cores"
    )
    memory_gb: Optional[StrictInt] = Field(
        default=None, description="The memory of the node in GB"
    )
    storage_gb: Optional[StrictInt] = Field(
        default=None, description="The storage of the node in GB"
    )
    description: Optional[StrictStr] = Field(
        default=None, description="Description of the node"
    )
    __properties: ClassVar[List[str]] = [
        "gpu_count",
        "gpu_vendor",
        "gpu_type",
        "gpu_memory",
        "cpu_cores",
        "memory_gb",
        "storage_gb",
        "description",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodePatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodePatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "gpu_count": obj.get("gpu_count"),
                "gpu_vendor": obj.get("gpu_vendor"),
                "gpu_type": obj.get("gpu_type"),
                "gpu_memory": obj.get("gpu_memory"),
                "cpu_cores": obj.get("cpu_cores"),
                "memory_gb": obj.get("memory_gb"),
                "storage_gb": obj.get("storage_gb"),
                "description": obj.get("description"),
            }
        )
        return _obj
