# coding: utf-8

"""
exalsius API

The exalsius REST API provides programmatic access to the core functionality of the exalsius ecosystem It is consumed directly by the exls CLI tool and can also be integrated into custom applications or scripts. Key points: * **CLI & Programmatic Access**   All operations are available via the `exls` command-line application or through standard HTTP requests.  * **GPU Market Offers** Retrieve and compare GPU instance pricing across public cloud providers and hyperscalers to identify the most cost-effective options. * **Operator Integration**   Works in conjunction with the [exalsius-operator](https://github.com/exalsius/exalsius-operator) deployed in a management Kubernetes cluster, to manage infrastructure and node lifecycles.  * **Node Management**   Import self-managed (SSH) and cloud-provider instances into your node pool with dedicated endpoints.  * **Cluster Provisioning**   Create and manage Kubernetes clusters across supported cloud providers and self-managed (bare-metal) nodes.  * **Service Deployment**   Deploy additional services—such as the NVIDIA GPU Operator, KubeRay, Flyte, or Kubeflow—using the API’s service-deployment endpoints.

The version of the OpenAPI document: 1.15.3
Contact: support@exalsius.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from exalsius_api_client.api_client import ApiClient, RequestSerialized
from exalsius_api_client.api_response import ApiResponse
from exalsius_api_client.models.offers_list_response import OffersListResponse
from exalsius_api_client.rest import RESTResponseType


class OffersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_offers(
        self,
        gpu_vendor: Annotated[
            Optional[StrictStr], Field(description="The vendor of the GPU")
        ] = None,
        gpu_type: Annotated[
            Optional[StrictStr], Field(description="The type of the GPU")
        ] = None,
        cloud_provider: Annotated[
            Optional[StrictStr], Field(description="The cloud provider of the offer")
        ] = None,
        region: Annotated[
            Optional[StrictStr],
            Field(description="The region of the offer, e.g. us-east-1"),
        ] = None,
        availability_zone: Annotated[
            Optional[StrictStr], Field(description="The availability zone of the offer")
        ] = None,
        location: Annotated[
            Optional[StrictStr], Field(description="The location of the offer")
        ] = None,
        cpu_vendor: Annotated[
            Optional[StrictStr], Field(description="The vendor of the CPU")
        ] = None,
        cpu_arch: Annotated[
            Optional[StrictStr], Field(description="The architecture of the CPU")
        ] = None,
        pricing_unit: Annotated[
            Optional[StrictStr], Field(description="The pricing unit")
        ] = None,
        price_type: Annotated[
            Optional[StrictStr], Field(description="The type of pricing model")
        ] = None,
        gpu_count_min: Annotated[
            Optional[StrictInt], Field(description="Minimum number of GPUs")
        ] = None,
        gpu_count_max: Annotated[
            Optional[StrictInt], Field(description="Maximum number of GPUs")
        ] = None,
        gpu_memory_min: Annotated[
            Optional[StrictInt],
            Field(description="Minimum GPU memory of single GPU (MiB)"),
        ] = None,
        gpu_memory_max: Annotated[
            Optional[StrictInt],
            Field(description="Maximum GPU memory of single GPU (MiB)"),
        ] = None,
        total_gpu_memory_min: Annotated[
            Optional[StrictInt], Field(description="Minimum total GPU memory (MiB)")
        ] = None,
        total_gpu_memory_max: Annotated[
            Optional[StrictInt], Field(description="Maximum total GPU memory (MiB)")
        ] = None,
        main_memory_min: Annotated[
            Optional[StrictInt], Field(description="Minimum main memory (MiB)")
        ] = None,
        main_memory_max: Annotated[
            Optional[StrictInt], Field(description="Maximum main memory (MiB)")
        ] = None,
        vcpus_min: Annotated[
            Optional[StrictInt], Field(description="Minimum number of virtual CPUs")
        ] = None,
        vcpus_max: Annotated[
            Optional[StrictInt], Field(description="Maximum number of virtual CPUs")
        ] = None,
        price_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Minimum price per hour"),
        ] = None,
        price_max: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Maximum price per hour"),
        ] = None,
        page_size: Annotated[
            Optional[StrictInt],
            Field(description="The number of offers to return per page"),
        ] = None,
        cursor: Annotated[
            Optional[StrictStr],
            Field(
                description="The cursor for pagination. Use the `next_cursor` from the previous response to get the next page."
            ),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort by")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr], Field(description="Sort order")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OffersListResponse:
        """List and filter current GPU on-demand and spot market offers

        **List GPU offers (on-demand & spot instances)** Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.

        :param gpu_vendor: The vendor of the GPU
        :type gpu_vendor: str
        :param gpu_type: The type of the GPU
        :type gpu_type: str
        :param cloud_provider: The cloud provider of the offer
        :type cloud_provider: str
        :param region: The region of the offer, e.g. us-east-1
        :type region: str
        :param availability_zone: The availability zone of the offer
        :type availability_zone: str
        :param location: The location of the offer
        :type location: str
        :param cpu_vendor: The vendor of the CPU
        :type cpu_vendor: str
        :param cpu_arch: The architecture of the CPU
        :type cpu_arch: str
        :param pricing_unit: The pricing unit
        :type pricing_unit: str
        :param price_type: The type of pricing model
        :type price_type: str
        :param gpu_count_min: Minimum number of GPUs
        :type gpu_count_min: int
        :param gpu_count_max: Maximum number of GPUs
        :type gpu_count_max: int
        :param gpu_memory_min: Minimum GPU memory of single GPU (MiB)
        :type gpu_memory_min: int
        :param gpu_memory_max: Maximum GPU memory of single GPU (MiB)
        :type gpu_memory_max: int
        :param total_gpu_memory_min: Minimum total GPU memory (MiB)
        :type total_gpu_memory_min: int
        :param total_gpu_memory_max: Maximum total GPU memory (MiB)
        :type total_gpu_memory_max: int
        :param main_memory_min: Minimum main memory (MiB)
        :type main_memory_min: int
        :param main_memory_max: Maximum main memory (MiB)
        :type main_memory_max: int
        :param vcpus_min: Minimum number of virtual CPUs
        :type vcpus_min: int
        :param vcpus_max: Maximum number of virtual CPUs
        :type vcpus_max: int
        :param price_min: Minimum price per hour
        :type price_min: float
        :param price_max: Maximum price per hour
        :type price_max: float
        :param page_size: The number of offers to return per page
        :type page_size: int
        :param cursor: The cursor for pagination. Use the `next_cursor` from the previous response to get the next page.
        :type cursor: str
        :param sort_by: Field to sort by
        :type sort_by: str
        :param sort_order: Sort order
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_offers_serialize(
            gpu_vendor=gpu_vendor,
            gpu_type=gpu_type,
            cloud_provider=cloud_provider,
            region=region,
            availability_zone=availability_zone,
            location=location,
            cpu_vendor=cpu_vendor,
            cpu_arch=cpu_arch,
            pricing_unit=pricing_unit,
            price_type=price_type,
            gpu_count_min=gpu_count_min,
            gpu_count_max=gpu_count_max,
            gpu_memory_min=gpu_memory_min,
            gpu_memory_max=gpu_memory_max,
            total_gpu_memory_min=total_gpu_memory_min,
            total_gpu_memory_max=total_gpu_memory_max,
            main_memory_min=main_memory_min,
            main_memory_max=main_memory_max,
            vcpus_min=vcpus_min,
            vcpus_max=vcpus_max,
            price_min=price_min,
            price_max=price_max,
            page_size=page_size,
            cursor=cursor,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "OffersListResponse",
            "400": "Error",
            "500": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_offers_with_http_info(
        self,
        gpu_vendor: Annotated[
            Optional[StrictStr], Field(description="The vendor of the GPU")
        ] = None,
        gpu_type: Annotated[
            Optional[StrictStr], Field(description="The type of the GPU")
        ] = None,
        cloud_provider: Annotated[
            Optional[StrictStr], Field(description="The cloud provider of the offer")
        ] = None,
        region: Annotated[
            Optional[StrictStr],
            Field(description="The region of the offer, e.g. us-east-1"),
        ] = None,
        availability_zone: Annotated[
            Optional[StrictStr], Field(description="The availability zone of the offer")
        ] = None,
        location: Annotated[
            Optional[StrictStr], Field(description="The location of the offer")
        ] = None,
        cpu_vendor: Annotated[
            Optional[StrictStr], Field(description="The vendor of the CPU")
        ] = None,
        cpu_arch: Annotated[
            Optional[StrictStr], Field(description="The architecture of the CPU")
        ] = None,
        pricing_unit: Annotated[
            Optional[StrictStr], Field(description="The pricing unit")
        ] = None,
        price_type: Annotated[
            Optional[StrictStr], Field(description="The type of pricing model")
        ] = None,
        gpu_count_min: Annotated[
            Optional[StrictInt], Field(description="Minimum number of GPUs")
        ] = None,
        gpu_count_max: Annotated[
            Optional[StrictInt], Field(description="Maximum number of GPUs")
        ] = None,
        gpu_memory_min: Annotated[
            Optional[StrictInt],
            Field(description="Minimum GPU memory of single GPU (MiB)"),
        ] = None,
        gpu_memory_max: Annotated[
            Optional[StrictInt],
            Field(description="Maximum GPU memory of single GPU (MiB)"),
        ] = None,
        total_gpu_memory_min: Annotated[
            Optional[StrictInt], Field(description="Minimum total GPU memory (MiB)")
        ] = None,
        total_gpu_memory_max: Annotated[
            Optional[StrictInt], Field(description="Maximum total GPU memory (MiB)")
        ] = None,
        main_memory_min: Annotated[
            Optional[StrictInt], Field(description="Minimum main memory (MiB)")
        ] = None,
        main_memory_max: Annotated[
            Optional[StrictInt], Field(description="Maximum main memory (MiB)")
        ] = None,
        vcpus_min: Annotated[
            Optional[StrictInt], Field(description="Minimum number of virtual CPUs")
        ] = None,
        vcpus_max: Annotated[
            Optional[StrictInt], Field(description="Maximum number of virtual CPUs")
        ] = None,
        price_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Minimum price per hour"),
        ] = None,
        price_max: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Maximum price per hour"),
        ] = None,
        page_size: Annotated[
            Optional[StrictInt],
            Field(description="The number of offers to return per page"),
        ] = None,
        cursor: Annotated[
            Optional[StrictStr],
            Field(
                description="The cursor for pagination. Use the `next_cursor` from the previous response to get the next page."
            ),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort by")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr], Field(description="Sort order")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OffersListResponse]:
        """List and filter current GPU on-demand and spot market offers

        **List GPU offers (on-demand & spot instances)** Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.

        :param gpu_vendor: The vendor of the GPU
        :type gpu_vendor: str
        :param gpu_type: The type of the GPU
        :type gpu_type: str
        :param cloud_provider: The cloud provider of the offer
        :type cloud_provider: str
        :param region: The region of the offer, e.g. us-east-1
        :type region: str
        :param availability_zone: The availability zone of the offer
        :type availability_zone: str
        :param location: The location of the offer
        :type location: str
        :param cpu_vendor: The vendor of the CPU
        :type cpu_vendor: str
        :param cpu_arch: The architecture of the CPU
        :type cpu_arch: str
        :param pricing_unit: The pricing unit
        :type pricing_unit: str
        :param price_type: The type of pricing model
        :type price_type: str
        :param gpu_count_min: Minimum number of GPUs
        :type gpu_count_min: int
        :param gpu_count_max: Maximum number of GPUs
        :type gpu_count_max: int
        :param gpu_memory_min: Minimum GPU memory of single GPU (MiB)
        :type gpu_memory_min: int
        :param gpu_memory_max: Maximum GPU memory of single GPU (MiB)
        :type gpu_memory_max: int
        :param total_gpu_memory_min: Minimum total GPU memory (MiB)
        :type total_gpu_memory_min: int
        :param total_gpu_memory_max: Maximum total GPU memory (MiB)
        :type total_gpu_memory_max: int
        :param main_memory_min: Minimum main memory (MiB)
        :type main_memory_min: int
        :param main_memory_max: Maximum main memory (MiB)
        :type main_memory_max: int
        :param vcpus_min: Minimum number of virtual CPUs
        :type vcpus_min: int
        :param vcpus_max: Maximum number of virtual CPUs
        :type vcpus_max: int
        :param price_min: Minimum price per hour
        :type price_min: float
        :param price_max: Maximum price per hour
        :type price_max: float
        :param page_size: The number of offers to return per page
        :type page_size: int
        :param cursor: The cursor for pagination. Use the `next_cursor` from the previous response to get the next page.
        :type cursor: str
        :param sort_by: Field to sort by
        :type sort_by: str
        :param sort_order: Sort order
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_offers_serialize(
            gpu_vendor=gpu_vendor,
            gpu_type=gpu_type,
            cloud_provider=cloud_provider,
            region=region,
            availability_zone=availability_zone,
            location=location,
            cpu_vendor=cpu_vendor,
            cpu_arch=cpu_arch,
            pricing_unit=pricing_unit,
            price_type=price_type,
            gpu_count_min=gpu_count_min,
            gpu_count_max=gpu_count_max,
            gpu_memory_min=gpu_memory_min,
            gpu_memory_max=gpu_memory_max,
            total_gpu_memory_min=total_gpu_memory_min,
            total_gpu_memory_max=total_gpu_memory_max,
            main_memory_min=main_memory_min,
            main_memory_max=main_memory_max,
            vcpus_min=vcpus_min,
            vcpus_max=vcpus_max,
            price_min=price_min,
            price_max=price_max,
            page_size=page_size,
            cursor=cursor,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "OffersListResponse",
            "400": "Error",
            "500": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_offers_without_preload_content(
        self,
        gpu_vendor: Annotated[
            Optional[StrictStr], Field(description="The vendor of the GPU")
        ] = None,
        gpu_type: Annotated[
            Optional[StrictStr], Field(description="The type of the GPU")
        ] = None,
        cloud_provider: Annotated[
            Optional[StrictStr], Field(description="The cloud provider of the offer")
        ] = None,
        region: Annotated[
            Optional[StrictStr],
            Field(description="The region of the offer, e.g. us-east-1"),
        ] = None,
        availability_zone: Annotated[
            Optional[StrictStr], Field(description="The availability zone of the offer")
        ] = None,
        location: Annotated[
            Optional[StrictStr], Field(description="The location of the offer")
        ] = None,
        cpu_vendor: Annotated[
            Optional[StrictStr], Field(description="The vendor of the CPU")
        ] = None,
        cpu_arch: Annotated[
            Optional[StrictStr], Field(description="The architecture of the CPU")
        ] = None,
        pricing_unit: Annotated[
            Optional[StrictStr], Field(description="The pricing unit")
        ] = None,
        price_type: Annotated[
            Optional[StrictStr], Field(description="The type of pricing model")
        ] = None,
        gpu_count_min: Annotated[
            Optional[StrictInt], Field(description="Minimum number of GPUs")
        ] = None,
        gpu_count_max: Annotated[
            Optional[StrictInt], Field(description="Maximum number of GPUs")
        ] = None,
        gpu_memory_min: Annotated[
            Optional[StrictInt],
            Field(description="Minimum GPU memory of single GPU (MiB)"),
        ] = None,
        gpu_memory_max: Annotated[
            Optional[StrictInt],
            Field(description="Maximum GPU memory of single GPU (MiB)"),
        ] = None,
        total_gpu_memory_min: Annotated[
            Optional[StrictInt], Field(description="Minimum total GPU memory (MiB)")
        ] = None,
        total_gpu_memory_max: Annotated[
            Optional[StrictInt], Field(description="Maximum total GPU memory (MiB)")
        ] = None,
        main_memory_min: Annotated[
            Optional[StrictInt], Field(description="Minimum main memory (MiB)")
        ] = None,
        main_memory_max: Annotated[
            Optional[StrictInt], Field(description="Maximum main memory (MiB)")
        ] = None,
        vcpus_min: Annotated[
            Optional[StrictInt], Field(description="Minimum number of virtual CPUs")
        ] = None,
        vcpus_max: Annotated[
            Optional[StrictInt], Field(description="Maximum number of virtual CPUs")
        ] = None,
        price_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Minimum price per hour"),
        ] = None,
        price_max: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Maximum price per hour"),
        ] = None,
        page_size: Annotated[
            Optional[StrictInt],
            Field(description="The number of offers to return per page"),
        ] = None,
        cursor: Annotated[
            Optional[StrictStr],
            Field(
                description="The cursor for pagination. Use the `next_cursor` from the previous response to get the next page."
            ),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort by")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr], Field(description="Sort order")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List and filter current GPU on-demand and spot market offers

        **List GPU offers (on-demand & spot instances)** Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.

        :param gpu_vendor: The vendor of the GPU
        :type gpu_vendor: str
        :param gpu_type: The type of the GPU
        :type gpu_type: str
        :param cloud_provider: The cloud provider of the offer
        :type cloud_provider: str
        :param region: The region of the offer, e.g. us-east-1
        :type region: str
        :param availability_zone: The availability zone of the offer
        :type availability_zone: str
        :param location: The location of the offer
        :type location: str
        :param cpu_vendor: The vendor of the CPU
        :type cpu_vendor: str
        :param cpu_arch: The architecture of the CPU
        :type cpu_arch: str
        :param pricing_unit: The pricing unit
        :type pricing_unit: str
        :param price_type: The type of pricing model
        :type price_type: str
        :param gpu_count_min: Minimum number of GPUs
        :type gpu_count_min: int
        :param gpu_count_max: Maximum number of GPUs
        :type gpu_count_max: int
        :param gpu_memory_min: Minimum GPU memory of single GPU (MiB)
        :type gpu_memory_min: int
        :param gpu_memory_max: Maximum GPU memory of single GPU (MiB)
        :type gpu_memory_max: int
        :param total_gpu_memory_min: Minimum total GPU memory (MiB)
        :type total_gpu_memory_min: int
        :param total_gpu_memory_max: Maximum total GPU memory (MiB)
        :type total_gpu_memory_max: int
        :param main_memory_min: Minimum main memory (MiB)
        :type main_memory_min: int
        :param main_memory_max: Maximum main memory (MiB)
        :type main_memory_max: int
        :param vcpus_min: Minimum number of virtual CPUs
        :type vcpus_min: int
        :param vcpus_max: Maximum number of virtual CPUs
        :type vcpus_max: int
        :param price_min: Minimum price per hour
        :type price_min: float
        :param price_max: Maximum price per hour
        :type price_max: float
        :param page_size: The number of offers to return per page
        :type page_size: int
        :param cursor: The cursor for pagination. Use the `next_cursor` from the previous response to get the next page.
        :type cursor: str
        :param sort_by: Field to sort by
        :type sort_by: str
        :param sort_order: Sort order
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_offers_serialize(
            gpu_vendor=gpu_vendor,
            gpu_type=gpu_type,
            cloud_provider=cloud_provider,
            region=region,
            availability_zone=availability_zone,
            location=location,
            cpu_vendor=cpu_vendor,
            cpu_arch=cpu_arch,
            pricing_unit=pricing_unit,
            price_type=price_type,
            gpu_count_min=gpu_count_min,
            gpu_count_max=gpu_count_max,
            gpu_memory_min=gpu_memory_min,
            gpu_memory_max=gpu_memory_max,
            total_gpu_memory_min=total_gpu_memory_min,
            total_gpu_memory_max=total_gpu_memory_max,
            main_memory_min=main_memory_min,
            main_memory_max=main_memory_max,
            vcpus_min=vcpus_min,
            vcpus_max=vcpus_max,
            price_min=price_min,
            price_max=price_max,
            page_size=page_size,
            cursor=cursor,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "OffersListResponse",
            "400": "Error",
            "500": "Error",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_offers_serialize(
        self,
        gpu_vendor,
        gpu_type,
        cloud_provider,
        region,
        availability_zone,
        location,
        cpu_vendor,
        cpu_arch,
        pricing_unit,
        price_type,
        gpu_count_min,
        gpu_count_max,
        gpu_memory_min,
        gpu_memory_max,
        total_gpu_memory_min,
        total_gpu_memory_max,
        main_memory_min,
        main_memory_max,
        vcpus_min,
        vcpus_max,
        price_min,
        price_max,
        page_size,
        cursor,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gpu_vendor is not None:

            _query_params.append(("gpu_vendor", gpu_vendor))

        if gpu_type is not None:

            _query_params.append(("gpu_type", gpu_type))

        if cloud_provider is not None:

            _query_params.append(("cloud_provider", cloud_provider))

        if region is not None:

            _query_params.append(("region", region))

        if availability_zone is not None:

            _query_params.append(("availability_zone", availability_zone))

        if location is not None:

            _query_params.append(("location", location))

        if cpu_vendor is not None:

            _query_params.append(("cpu_vendor", cpu_vendor))

        if cpu_arch is not None:

            _query_params.append(("cpu_arch", cpu_arch))

        if pricing_unit is not None:

            _query_params.append(("pricing_unit", pricing_unit))

        if price_type is not None:

            _query_params.append(("price_type", price_type))

        if gpu_count_min is not None:

            _query_params.append(("gpu_count_min", gpu_count_min))

        if gpu_count_max is not None:

            _query_params.append(("gpu_count_max", gpu_count_max))

        if gpu_memory_min is not None:

            _query_params.append(("gpu_memory_min", gpu_memory_min))

        if gpu_memory_max is not None:

            _query_params.append(("gpu_memory_max", gpu_memory_max))

        if total_gpu_memory_min is not None:

            _query_params.append(("total_gpu_memory_min", total_gpu_memory_min))

        if total_gpu_memory_max is not None:

            _query_params.append(("total_gpu_memory_max", total_gpu_memory_max))

        if main_memory_min is not None:

            _query_params.append(("main_memory_min", main_memory_min))

        if main_memory_max is not None:

            _query_params.append(("main_memory_max", main_memory_max))

        if vcpus_min is not None:

            _query_params.append(("vcpus_min", vcpus_min))

        if vcpus_max is not None:

            _query_params.append(("vcpus_max", vcpus_max))

        if price_min is not None:

            _query_params.append(("price_min", price_min))

        if price_max is not None:

            _query_params.append(("price_max", price_max))

        if page_size is not None:

            _query_params.append(("page_size", page_size))

        if cursor is not None:

            _query_params.append(("cursor", cursor))

        if sort_by is not None:

            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:

            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/offers",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
