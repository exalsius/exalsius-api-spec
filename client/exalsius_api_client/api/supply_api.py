# coding: utf-8

"""
    exalsius API

    The exalsius REST API provides programmatic access to the core functionality of the exalsius ecosystem It is consumed directly by the exls CLI tool and can also be integrated into custom applications or scripts. Key points: * **CLI & Programmatic Access**   All operations are available via the `exls` command-line application or through standard HTTP requests.  * **GPU Market Offers** Retrieve and compare GPU instance pricing across public cloud providers and hyperscalers to identify the most cost-effective options. * **Operator Integration**   Works in conjunction with the [exalsius-operator](https://github.com/exalsius/exalsius-operator) deployed in a management Kubernetes cluster, to manage infrastructure and node lifecycles.  * **Node Management**   Import self-managed (SSH) and cloud-provider instances into your node pool with dedicated endpoints.  * **Cluster Provisioning**   Create and manage Kubernetes clusters across supported cloud providers and self-managed (bare-metal) nodes.  * **Service Deployment**   Deploy additional services—such as the NVIDIA GPU Operator, KubeRay, Flyte, or Kubeflow—using the API’s service-deployment endpoints. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@exalsius.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from exalsius_api_client.models.offers_list_response import OffersListResponse

from exalsius_api_client.api_client import ApiClient, RequestSerialized
from exalsius_api_client.api_response import ApiResponse
from exalsius_api_client.rest import RESTResponseType


class SupplyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_offers(
        self,
        gpu_vendor: Optional[StrictStr] = None,
        gpu_type: Annotated[Optional[StrictStr], Field(description="The type of the GPU")] = None,
        provider: Annotated[Optional[StrictStr], Field(description="The cloud provider of the offer")] = None,
        region: Annotated[Optional[StrictStr], Field(description="The region of the offer, e.g. us-east-1")] = None,
        gpu_count: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum number of GPUs in the offer")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum price per hour for the offer")] = None,
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum number of offers to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OffersListResponse:
        """List and filter current GPU on-demand and spot market offers

        **List GPU offers (on-demand & spot instances)** Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.  **Parameters (optional)** - `gpu_vendor`: The vendor of the GPU (nvidia, amd, intel, huawei) - `gpu_type`: The type of the GPU - `provider`: The cloud provider of the offer - `region`: The region of the offer - `gpu_count`: The minimum number of GPUs in the offer - `price`: The maximum price per hour for the offer - `limit`: The maximum number of offers to return  **Examples**  Here's an example of how to filter by vendor:   ```   /offers?gpu_vendor=nvidia   ```  Here's an example of how to filter by provider:   ```   /offers?provider=aws   ```  Here's an example of how to filter by provider and region:   ```   /offers?provider=aws&region=us-east-1   ```    Here's an example of how to filter by provider, region, and gpuCount:   ```   /offers?provider=aws&region=us-east-1&gpuCount=1   ```    **Result**  The response is paginated with a limit of 50 offers per page. The offers are sorted by price per hour, from lowest to highest. 

        :param gpu_vendor:
        :type gpu_vendor: str
        :param gpu_type: The type of the GPU
        :type gpu_type: str
        :param provider: The cloud provider of the offer
        :type provider: str
        :param region: The region of the offer, e.g. us-east-1
        :type region: str
        :param gpu_count: The minimum number of GPUs in the offer
        :type gpu_count: float
        :param price: The maximum price per hour for the offer
        :type price: float
        :param limit: The maximum number of offers to return
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_offers_serialize(
            gpu_vendor=gpu_vendor,
            gpu_type=gpu_type,
            provider=provider,
            region=region,
            gpu_count=gpu_count,
            price=price,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OffersListResponse",
            '400': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_offers_with_http_info(
        self,
        gpu_vendor: Optional[StrictStr] = None,
        gpu_type: Annotated[Optional[StrictStr], Field(description="The type of the GPU")] = None,
        provider: Annotated[Optional[StrictStr], Field(description="The cloud provider of the offer")] = None,
        region: Annotated[Optional[StrictStr], Field(description="The region of the offer, e.g. us-east-1")] = None,
        gpu_count: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum number of GPUs in the offer")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum price per hour for the offer")] = None,
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum number of offers to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OffersListResponse]:
        """List and filter current GPU on-demand and spot market offers

        **List GPU offers (on-demand & spot instances)** Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.  **Parameters (optional)** - `gpu_vendor`: The vendor of the GPU (nvidia, amd, intel, huawei) - `gpu_type`: The type of the GPU - `provider`: The cloud provider of the offer - `region`: The region of the offer - `gpu_count`: The minimum number of GPUs in the offer - `price`: The maximum price per hour for the offer - `limit`: The maximum number of offers to return  **Examples**  Here's an example of how to filter by vendor:   ```   /offers?gpu_vendor=nvidia   ```  Here's an example of how to filter by provider:   ```   /offers?provider=aws   ```  Here's an example of how to filter by provider and region:   ```   /offers?provider=aws&region=us-east-1   ```    Here's an example of how to filter by provider, region, and gpuCount:   ```   /offers?provider=aws&region=us-east-1&gpuCount=1   ```    **Result**  The response is paginated with a limit of 50 offers per page. The offers are sorted by price per hour, from lowest to highest. 

        :param gpu_vendor:
        :type gpu_vendor: str
        :param gpu_type: The type of the GPU
        :type gpu_type: str
        :param provider: The cloud provider of the offer
        :type provider: str
        :param region: The region of the offer, e.g. us-east-1
        :type region: str
        :param gpu_count: The minimum number of GPUs in the offer
        :type gpu_count: float
        :param price: The maximum price per hour for the offer
        :type price: float
        :param limit: The maximum number of offers to return
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_offers_serialize(
            gpu_vendor=gpu_vendor,
            gpu_type=gpu_type,
            provider=provider,
            region=region,
            gpu_count=gpu_count,
            price=price,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OffersListResponse",
            '400': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_offers_without_preload_content(
        self,
        gpu_vendor: Optional[StrictStr] = None,
        gpu_type: Annotated[Optional[StrictStr], Field(description="The type of the GPU")] = None,
        provider: Annotated[Optional[StrictStr], Field(description="The cloud provider of the offer")] = None,
        region: Annotated[Optional[StrictStr], Field(description="The region of the offer, e.g. us-east-1")] = None,
        gpu_count: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum number of GPUs in the offer")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum price per hour for the offer")] = None,
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum number of offers to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List and filter current GPU on-demand and spot market offers

        **List GPU offers (on-demand & spot instances)** Retrieve current GPU instance offers from both on-demand and spot markets, with optional filters.  **Parameters (optional)** - `gpu_vendor`: The vendor of the GPU (nvidia, amd, intel, huawei) - `gpu_type`: The type of the GPU - `provider`: The cloud provider of the offer - `region`: The region of the offer - `gpu_count`: The minimum number of GPUs in the offer - `price`: The maximum price per hour for the offer - `limit`: The maximum number of offers to return  **Examples**  Here's an example of how to filter by vendor:   ```   /offers?gpu_vendor=nvidia   ```  Here's an example of how to filter by provider:   ```   /offers?provider=aws   ```  Here's an example of how to filter by provider and region:   ```   /offers?provider=aws&region=us-east-1   ```    Here's an example of how to filter by provider, region, and gpuCount:   ```   /offers?provider=aws&region=us-east-1&gpuCount=1   ```    **Result**  The response is paginated with a limit of 50 offers per page. The offers are sorted by price per hour, from lowest to highest. 

        :param gpu_vendor:
        :type gpu_vendor: str
        :param gpu_type: The type of the GPU
        :type gpu_type: str
        :param provider: The cloud provider of the offer
        :type provider: str
        :param region: The region of the offer, e.g. us-east-1
        :type region: str
        :param gpu_count: The minimum number of GPUs in the offer
        :type gpu_count: float
        :param price: The maximum price per hour for the offer
        :type price: float
        :param limit: The maximum number of offers to return
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_offers_serialize(
            gpu_vendor=gpu_vendor,
            gpu_type=gpu_type,
            provider=provider,
            region=region,
            gpu_count=gpu_count,
            price=price,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OffersListResponse",
            '400': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_offers_serialize(
        self,
        gpu_vendor,
        gpu_type,
        provider,
        region,
        gpu_count,
        price,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gpu_vendor is not None:
            
            _query_params.append(('gpu_vendor', gpu_vendor))
            
        if gpu_type is not None:
            
            _query_params.append(('gpu_type', gpu_type))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if gpu_count is not None:
            
            _query_params.append(('gpu_count', gpu_count))
            
        if price is not None:
            
            _query_params.append(('price', price))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/offers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


